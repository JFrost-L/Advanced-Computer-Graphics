#version 330 core
in vec2 TexCoord;
out vec4 FragColor;

uniform sampler2D textureSampler;
uniform float blurAmount; // 블러 강도
uniform int keyboard; // 키보드 입력을 정수로 처리

void main() {
    vec2 texelSize = 1.0 / textureSize(textureSampler, 0); // 텍스처의 픽셀 크기
    vec4 result = vec4(0.0);

    if (keyboard == 0) {
        // 가우시안 블러 커널 정의
        float kernel[9] = float[](
            1, 2, 1,
            2, 4, 2,
            1, 2, 1
        );

        // 가우시안 블러 계산
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                vec2 offset = vec2(float(i), float(j));
                result += texture(textureSampler, TexCoord + offset * texelSize) * kernel[(i + 1) * 3 + j + 1];
            }
        }

        // 블러 강도에 따라 텍스처를 혼합
        FragColor = mix(texture(textureSampler, TexCoord), result / 9.0, blurAmount);
    } else if (keyboard == 1) {
        // 평균 필터 커널 정의
        float kernel[9] = float[](
            1, 1, 1,
            1, 1, 1,
            1, 1, 1
        );

        // 평균 필터 계산
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                vec2 offset = vec2(float(i), float(j));
                result += texture(textureSampler, TexCoord + offset * texelSize) * kernel[(i + 1) * 3 + j + 1];
            }
        }
        // 블러 강도에 따라 텍스처를 혼합
        FragColor = mix(texture(textureSampler, TexCoord), result / 9.0, blurAmount);
    } else if (keyboard == 2) {
        // 원본 이미지 로드
        vec4 color = texture(textureSampler, TexCoord);

        // 에지 검출을 위한 커널 정의 (예: 소벨 필터)
        float kernelX[9] = float[](
            -1, 0, 1,
            -2, 0, 2,
            -1, 0, 1
        );

        float kernelY[9] = float[](
            1, 2, 1,
            0, 0, 0,
            -1, -2, -1
        );

        // 에지 검출 계산 (수평 및 수직 소벨 필터를 적용한 그레디언트)
        float gradientX = 0.0;
        float gradientY = 0.0;

        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                vec2 offset = vec2(float(i), float(j));
                gradientX += texture(textureSampler, TexCoord + offset * texelSize).r * kernelX[(i + 1) * 3 + j + 1];
                gradientY += texture(textureSampler, TexCoord + offset * texelSize).r * kernelY[(i + 1) * 3 + j + 1];
            }
        }

        // 에지 강도 계산 (그레디언트 벡터의 크기)
        float edge = sqrt(gradientX * gradientX + gradientY * gradientY);

        // 에지 값이 양수인 부분만 흰색으로 표시 (나머지는 검은색)
        if (edge > 0.3) {
            FragColor = vec4(1.0, 1.0, 1.0, 1.0); // 에지가 검출된 부분을 흰색으로 표시
        } else {
            FragColor = vec4(0.0, 0.0, 0.0, 1.0); // 에지가 검출되지 않은 부분을 검은색으로 표시
        }
    }
}
